/*
Copyright 2021 The tKeel Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package io.tkeel.plugin.api.repo.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tkeel-io/tkeel/api/repo/v1;v1";
option java_multiple_files = true;
option java_package = "io.tkeel.plugin.api.repo.v1";

service Repo {
    rpc CreateRepo(CreateRepoRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/repos/{name}"
            body: "url"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建仓库接口"
            operation_id: "CreateRepo"
            tags: "Repo"
            responses: [
                {
                    key: "200"
                    value: {description: "SUCC"}
                },
                {
                    key: "400"
                    value: {description: "INVALID_ARGUMENT"}
                },
                {
                    key: "409"
                    value: {description: "ALREADY_EXISTS"}
                },
                {
                    key: "500"
                    value: {description: "INTERNAL_STORE"}
                }
            ]
        };
    };

    rpc DeleteRepo(DeleteRepoRequest) returns (DeleteRepoResponse) {
        option (google.api.http) = {
            delete: "/repos/{name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除仓库接口"
            operation_id: "DeleteRepo"
            tags: "Repo"
            responses: [
                {
                    key: "200"
                    value: {description: "SUCC"}
                },
                {
                    key: "400"
                    value: {description: "INVALID_ARGUMENT"}
                },
                {
                    key: "404"
                    value: {description: "REPO_NOT_FOUND"}
                },
                {
                    key: "500"
                    value: {description: "INTERNAL_STORE"}
                }
            ]
        };
    };

    rpc ListRepo(google.protobuf.Empty) returns (ListRepoResponse) {
        option (google.api.http) = {
            get: "/repos"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取仓库列表接口"
            operation_id: "ListRepo"
            tags: "Repo"
            responses: [
                {
                    key: "200"
                    value: {description: "SUCC"}
                },
                {
                    key: "400"
                    value: {description: "INVALID_ARGUMENT"}
                },
                {
                    key: "500"
                    value: {description: "INTERNAL_STORE"}
                }
            ]
        };
    };

    rpc ListAllRepoInstaller(ListAllRepoInstallerRequest)
            returns (ListAllRepoInstallerResponse) {
        option (google.api.http) = {
            get: "/repos/installers"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取所有仓库的安装包列表接口"
            operation_id: "ListAllRepoInstaller"
            tags: "Repo"
            responses: [
                {
                    key: "200"
                    value: {description: "SUCC"}
                },
                {
                    key: "400"
                    value: {description: "INVALID_ARGUMENT"}
                },
                {
                    key: "500"
                    value: {description: "INTERNAL_STORE"}
                }
            ]
        };
    };

    rpc ListRepoInstaller(ListRepoInstallerRequest)
            returns (ListRepoInstallerResponse) {
        option (google.api.http) = {
            get: "/repos/{repo}/installers"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取仓库中安装包列表接口"
            operation_id: "ListRepoInstaller"
            tags: "Repo"
            responses: [
                {
                    key: "200"
                    value: {description: "SUCC"}
                },
                {
                    key: "400"
                    value: {description: "INVALID_ARGUMENT"}
                },
                {
                    key: "404"
                    value: {description: "REPO_NOT_FOUND"}
                },
                {
                    key: "500"
                    value: {description: "INTERNAL_STORE"}
                }
            ]
        };
    };

    rpc GetRepoInstaller(GetRepoInstallerRequest)
            returns (GetRepoInstallerResponse) {
        option (google.api.http) = {
            get: "/repos/{repo}/installers/{installer_name}/{installer_version}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取仓库中指定安装包"
            operation_id: "GetRepoInstaller"
            tags: "Repo"
            responses: [
                {
                    key: "200"
                    value: {description: "SUCC"}
                },
                {
                    key: "400"
                    value: {description: "INVALID_ARGUMENT"}
                },
                {
                    key: "404"
                    value: {description: "REPO_NOT_FOUND"}
                },
                {
                    key: "404"
                    value: {description: "INSTALLER_NOT_FOUND"}
                },
                {
                    key: "500"
                    value: {description: "INTERNAL_STORE"}
                }
            ]
        };
    };
};

message RepoObject {
    string name = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "名称"
    }];
    string url = 2
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "地址"
    }];
    map<string, bytes> metadata = 3
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "元数据"
    }];
    map<string, string> annotations = 4
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "注解"
    }];
    int32 installer_num = 5
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "安装包数量"
    }];
}

enum InstallerState {
    UNINSTALL = 0;
    INSTALLED = 1;
    SAME_NAME = 2;
}

message VersionList {
    string version = 1 ;
    uint64 create_time = 2;
}

message InstallerObject {
    string name = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "名称"
    }];
    string version = 2
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "版本"
    }];
    string repo = 3
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库"
    }];
    map<string, bytes> metadata = 4
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "元数据"
    }];
    map<string, string> annotations = 5
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "注解"
    }];
    message maintainer {
        string name = 1
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "名称"
        }];
        string email = 2
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "邮箱"
        }];
        string url = 3
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "地址"
        }];
    }
    repeated maintainer maintainers = 6
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "维护者"
    }];
    InstallerState state = 7
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "状态"
    }];
    string desc = 8
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "描述"
    }];
    uint64 timestamp = 9
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "更新时间"
    }];
    string icon = 10
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "图标"
    }];
    repeated VersionList version_list = 11
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "版本列表"
    }];
}

message CreateRepoRequest {
    string name = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库名称"
    }];
    message RepoUrl {
        string url = 1
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "仓库地址"
        }];
    }
    RepoUrl url = 2
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库地址信息"
    }];
}

message CreateRepoResponse {
    RepoObject repo = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库"
    }];
}

message DeleteRepoRequest {
    string name = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库名称"
    }];
}

message DeleteRepoResponse {
    RepoObject repo = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库"
    }];
}

message ListRepoResponse {
    repeated RepoObject repos = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库列表"
    }];
}

message ListAllRepoInstallerRequest {
    int32 page_num = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "页码"
    }];
    int32 page_size = 2
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "每页数量"
    }];
    string order_by = 3
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "排序字段"
    }];
    bool is_descending = 4
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "是否倒序"
    }];
    string key_words = 5
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "搜素关键字"
    }];
    bool installed = 10
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "是否安装"
    }];
}

message ListAllRepoInstallerResponse {
    int32 total = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "总数量"
    }];
    int32 page_num = 2
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "页码"
    }];
    int32 page_size = 3
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "每页数量"
    }];
    repeated InstallerObject brief_installers = 10
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "安装包简要信息"
    }];
    int32 installed_num = 11
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "已安装数量"
    }];
}

message ListRepoInstallerRequest {
    int32 page_num = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "页码"
    }];
    int32 page_size = 2
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "每页数量"
    }];
    string order_by = 3
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "排序字段"
    }];
    bool is_descending = 4
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "是否倒序"
    }];
    string key_words = 5
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "搜索关键字"
    }];

    string repo = 10
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库名称"
    }];
    bool installed = 11
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "是否安装"
    }];
}

message ListRepoInstallerResponse {
    int32 total = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "总数量"
    }];
    int32 page_num = 2
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "页码"
    }];
    int32 page_size = 3
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "每页数量"
    }];
    repeated InstallerObject brief_installers = 10
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "安装包简要信息"
    }];
    int32 installed_num = 11
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "安装包数量"
    }];
}

message GetRepoInstallerRequest {
    string repo = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "仓库名称"
    }];
    string installer_name = 2
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "安装包名称"
    }];
    string installer_version = 3
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "安装包版本"
    }];
}

message GetRepoInstallerResponse {
    InstallerObject installer = 1
    [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "安装包"
    }];
;
}