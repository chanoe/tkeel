/*
Copyright 2021 The tKeel Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package io.tkeel.security.api.oauth.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tkeel-io/tkeel/api/security_oauth/v1;v1";
option java_multiple_files = true;
option java_package = "io.tkeel.security.api.oauth.v1";

service Oauth {

  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {
    option (google.api.http) = {
      get : "/oauth/{tenant_id}/authorize"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取授权码"
      operation_id : "OauthAuthorize"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      get : "/oauth/{tenant_id}/token"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取API access_token"
      operation_id : "OauthToken"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc Authenticate(google.protobuf.Empty) returns (AuthenticateResponse) {
    option (google.api.http) = {
      get : "/oauth/authenticate"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取 access_token 认证信息"
      operation_id : "OauthAuthenticate"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post : "/oauth/rspwd"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "重置密码"
      operation_id : "ResetPassword"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc UpdatePassword(UpdatePasswordRequest)returns(UpdatePasswordResponse){
    option (google.api.http) = {
      put : "/oauth/pwd"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "修改密码"
      operation_id : "UpdatePassword"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc OIDCRegister(OIDCRegisterRequest) returns (OIDCRegisterResponse) {
    option (google.api.http) = {
      post : "/oauth/oidc/register"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "注册 OIDC 外部身份认证方"
      operation_id : "OIDCRegister"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  rpc TokenRevoke (TokenRevokeRequest) returns(TokenRevokeResponse){
    option (google.api.http) = {
      post : "/oauth/token/revoke"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "注销 access_token"
      operation_id : "TokenRevoke"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  // Identity provider config
  rpc IdentityProviderTemplate (IdProviderTemplateRequest) returns(IdProviderTemplateResponse){
    option (google.api.http) = {
      get : "/oauth/id-provider/template"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取外部身份认证配置模板"
      operation_id : "IdentityProviderTemplate"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }

  // Identity provider register
  rpc IdentityProviderRegister (IdProviderRegisterRequest) returns(IdProviderRegisterResponse){
    option (google.api.http) = {
      post : "/oauth/id-provider/register/{tenant_id}"
      body : "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "外部认证注册"
      operation_id : "IdentityProviderRegister"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }
  // Get Identity provider
  rpc GetIdentityProvider (GetIdentityProviderRequest) returns(GetIdentityProviderResponse){
    option (google.api.http) = {
      get : "/oauth/id-provider/{tenant_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取租户外部认证配置"
      operation_id : "GetIdentityProvider"
      tags : "OAuth"
      responses : [ {
        key : "200"
        value : {description : "OK"}
      } ]
    };
  }
}

//
message AuthorizeRequest {
  string tenant_id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "租户ID"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string response_type = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "授权返回类型: code (授权码)"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string username = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "用户名 username"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string password = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "密码 password"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string redirect_uri = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "授权码 重定向地址"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string state = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "state"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
}

message AuthorizeResponse { string code = 1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  description : "-"
} ]; }

message TokenRequest {
  string tenant_id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "租户ID"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string grant_type = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "授权方式，支持: authorize_code password"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string code = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "授权码"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
  string redirect_uri = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "授权码重定向地址"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
  string username = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "username"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
  string password = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "password"
    },
    (google.api.field_behavior) = OPTIONAL
  ];

  string refresh_token = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "refresh token"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
  bool disable_redirect = 8 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "禁用成功获取 Token 后的重定向行为"
    },
    (google.api.field_behavior) = OPTIONAL
  ];
}

message TokenResponse {
  string access_token = 1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string refresh_token = 2[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  int64 expires_in = 3[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string token_type = 4[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string redirect_url =5[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
}

message AuthenticateResponse {
  int64 expires_in = 1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string user_id = 2[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string username = 3[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string external_id = 4[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string nick_name = 5[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string avatar = 6[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string tenant_id = 7[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string auth_type =8[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
}

message ResetPasswordRequest {
  ResetPasswordBody body =1;
}

message ResetPasswordBody {
  string new_password =1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "新密码"
    }
  ];
  string reset_key =2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "重置密码密钥"
    }
  ];
}


message ResetPasswordResponse {
  string tenant_id =1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  bool has_reset =2[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string username =3[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
}

message OIDCRegisterRequest {
  OIDCRegisterBody body = 1;
}
message OIDCRegisterBody {
  string issuer =1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string client_id =2[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string client_secret =3[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string redirect_url =4[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  repeated string scopes =5[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  bool get_user_info =6[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  bool insecure_skip_verify =7[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string email_key =8[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string preferred_username_key =9[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  OIDCEndpoint endpoint =10[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  string tenant_id =11[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
}
message OIDCEndpoint {
    string auth_url =1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "-"
    } ];
    string token_url=2[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "-"
    } ];
    string user_info_url=3[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "-"
    } ];
    string jwksurl =4[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "-"
    } ];
    string end_session_url =5[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "-"
    } ];
}

message OIDCRegisterResponse {
  bool ok =1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
}

message TokenRevokeRequest {
  TokenRevokeBody body =1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
}
message TokenRevokeBody {
  string refresh_token =1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "刷新Token refreshToken"
    }
  ];
}

message TokenRevokeResponse {
  string tenant_id=1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
  bool revoked =2[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "-"
  } ];
}

message UpdatePasswordRequest {
  UpdatePasswordBody body =1;
}

message UpdatePasswordBody {
 string new_password =1[
   (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
   {
     description : "新密码"
   }
 ];
 string refresh_token =2[
   (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
   {
     description : "刷新 token"
   }
 ];
}

message UpdatePasswordResponse {
  string tenant_id =1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "租户ID"
  } ];
}

// IdentityProviderConfig request.
message IdProviderTemplateRequest {
  string type = 1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "协议类型"
    }
  ];
}
// IdentityProviderConfig response.
message IdProviderTemplateResponse {
  bytes config = 1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "配置"
  } ];
}


// IdentityProviderConfig request.
message IdProviderRegisterRequest {
  string tenant_id =1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "租户ID"
    }
  ];
  IdProviderRegisterRequestBody body = 2;
}
// IdentityProviderConfig request.
message IdProviderRegisterRequestBody {
  string type = 1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "协议类型"
    }
  ];
  bytes config =2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "配置 base64"
    }
  ];
}
// IdentityProviderConfig request.
message IdProviderRegisterResponse {
  bool registered = 1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "注册成功"
  } ];
}

// IdentityProviderConfig request.
message GetIdentityProviderRequest {
  string tenant_id =1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =
    {
      description : "租户ID"
    }
  ];
}
message GetIdentityProviderResponse {
  string type = 1[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "类型"
  } ];
  bytes config = 2[ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "配置"
  } ];
}